#include <WiFi.h>
#include <HTTPClient.h>
#include <Keypad.h>
#include <Wire.h>
#include <LiquidCrystal.h>
#include <ArduinoJson.h>
#include <U8g2lib.h> 
#include <NTPClient.h>
#include <string>
#include <Adafruit_GFX.h>
#include <Adafruit_PCD8544.h>

#define ROW_NUM 4
#define COL_NUM 4

#define rs   15
#define enable   2
#define d4   4
#define d5   5
#define d6   18
#define d7   19

#define SDA_PIN_2 21
#define SCL_PIN_2 22

#define SDA_PIN_3 13
#define SCL_PIN_3 23

#define NTP_SERVER     "pool.ntp.org"
#define UTC_OFFSET     -8
#define UTC_OFFSET_DST -7

WiFiUDP ntpUDP;
NTPClient timeClient(ntpUDP, NTP_SERVER, UTC_OFFSET * 3600, 60000);

const String url = // use your own Lambda function here
const byte ROWS = 4;
const byte COLS = 4;
char keys[ROWS][COLS] = {
  { '1', '2', '3', 'A' },
  { '4', '5', '6', 'B' },
  { '7', '8', '9', 'C' },
  { '*', '0', '#', 'D' }
};

byte pin_rows[ROWS] = {12, 14, 27, 26};
byte pin_cols[COLS] = {25, 33, 32, 35};

Keypad keypad = Keypad(makeKeymap(keys), pin_rows, pin_cols, ROWS, COLS);
U8G2_SH1106_128X64_NONAME_F_HW_I2C u8g2(U8G2_R0, SDA_PIN_2, SCL_PIN_2, /* reset=*/ U8X8_PIN_NONE);
U8G2_SH1106_128X64_NONAME_F_HW_I2C u8g3(U8G2_R0, SDA_PIN_3, SCL_PIN_3); 

//U8G2_SSD1306_128X64_NONAME_1_SW_I2C u8g2_2(U8G2_R0, 23, 13, /* reset=*/ U8X8_PIN_NONE);
//U8G2_SSD1306_128X64_NONAME_1_SW_I2C u8g2_1(U8G2_R0, 22, 21, /* reset=*/ U8X8_PIN_NONE);

LiquidCrystal lcd(rs, enable, d4, d5, d6, d7);
String input = "";

byte newbus_bitmap[] = {
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 
	0xf8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc7, 
	0xf8, 0xff, 0xff, 0xff, 0xff, 0x01, 0xf0, 0xff, 0xff, 0x07, 0xe0, 0xff, 0xff, 0xff, 0x1f, 0xc7, 
	0x38, 0xfc, 0x43, 0xfc, 0x8f, 0x01, 0xf0, 0xff, 0xff, 0x07, 0xe0, 0xff, 0xff, 0xff, 0x1f, 0xc7, 
	0x38, 0xf8, 0x41, 0xfc, 0x8f, 0x01, 0xf0, 0xff, 0xff, 0x07, 0xe0, 0xff, 0xff, 0xff, 0x1f, 0xc7, 
	0x38, 0x60, 0xc0, 0xff, 0xff, 0xe1, 0xf0, 0xff, 0xff, 0x87, 0xe3, 0xff, 0xff, 0xfc, 0x1f, 0xc7, 
	0x38, 0x00, 0x40, 0x04, 0x88, 0x01, 0x10, 0x47, 0x00, 0x06, 0x20, 0x40, 0xc0, 0x44, 0x00, 0xc7, 
	0x38, 0x00, 0x40, 0x04, 0x88, 0x01, 0x10, 0x47, 0x00, 0x06, 0x20, 0x40, 0x80, 0x40, 0x00, 0xc7, 
	0x38, 0x04, 0x42, 0xc4, 0x88, 0x01, 0x18, 0x47, 0xf8, 0x07, 0x30, 0xc6, 0x8f, 0x70, 0x1c, 0xc7, 
	0x38, 0x0c, 0x43, 0xc4, 0x88, 0xe1, 0x10, 0x47, 0x00, 0x86, 0x23, 0x46, 0x80, 0x78, 0x1c, 0xc7, 
	0x38, 0xfc, 0x43, 0xc4, 0x88, 0x01, 0x10, 0xc0, 0x1f, 0x06, 0x20, 0x46, 0x8e, 0x78, 0x00, 0xc7, 
	0x38, 0xfc, 0x43, 0xc4, 0x88, 0x01, 0x10, 0x40, 0x00, 0x06, 0x20, 0x40, 0x80, 0x78, 0x00, 0xc7, 
	0x38, 0xfc, 0x43, 0xc4, 0x88, 0x01, 0x30, 0x70, 0x00, 0x06, 0x20, 0x40, 0x80, 0x78, 0x00, 0xc7, 
	0xf8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc7, 
	0x00, 0x00, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 
	0x00, 0x00, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xff, 0xff, 
	0xff, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xff, 0xff, 
	0xff, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xff, 0xff, 
	0xff, 0xff, 0xe0, 0xff, 0xff, 0x87, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc3, 0xff, 0xff, 
	0xff, 0x03, 0x18, 0x00, 0x10, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x87, 0xff, 0xff, 
	0xff, 0x03, 0x08, 0x00, 0x18, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x8f, 0xff, 0xff, 
	0xff, 0x60, 0xe4, 0xff, 0x0f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x9f, 0xff, 0xff, 
	0xff, 0x60, 0xe4, 0xff, 0x0f, 0xc4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x9f, 0xff, 0xff, 
	0xff, 0x60, 0x04, 0x00, 0x08, 0xc4, 0xf8, 0xc7, 0x1f, 0x7f, 0xfc, 0xf8, 0x11, 0x9f, 0xff, 0xff, 
	0xff, 0x60, 0x0c, 0x00, 0x0c, 0xc4, 0xf8, 0xc7, 0x1f, 0x7f, 0xfc, 0xf8, 0x31, 0x9e, 0xff, 0xff, 
	0xff, 0x60, 0xfc, 0xff, 0x0f, 0xc4, 0xf8, 0xc7, 0x1f, 0x7f, 0xfc, 0xf8, 0x71, 0x9c, 0xff, 0xff, 
	0xff, 0x60, 0x00, 0x00, 0x00, 0xc4, 0xf8, 0xc7, 0x1f, 0x7f, 0xfc, 0xf8, 0xf1, 0x98, 0xff, 0xff, 
	0xff, 0x7f, 0x00, 0x00, 0x00, 0xc4, 0xf8, 0xc7, 0x1f, 0x7f, 0xfc, 0xf8, 0xf1, 0x99, 0xff, 0xff, 
	0xff, 0x7f, 0xe0, 0x07, 0x02, 0xc6, 0xf8, 0xc7, 0x1f, 0x7f, 0xfc, 0xf8, 0xf1, 0x99, 0xff, 0xff, 
	0xff, 0x7f, 0xc0, 0x0f, 0x04, 0xc6, 0xf8, 0xc7, 0x1f, 0x7f, 0xfc, 0xf8, 0xf1, 0x99, 0xff, 0xff, 
	0xff, 0x7f, 0x80, 0x1f, 0x08, 0xc6, 0xf8, 0xc7, 0x1f, 0x7f, 0xfc, 0xf8, 0xf1, 0x99, 0xff, 0xff, 
	0xff, 0x7f, 0x00, 0x3f, 0x10, 0xc6, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x98, 0xff, 0xff, 
	0xff, 0x7f, 0x00, 0x7e, 0x20, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x98, 0xff, 0xff, 
	0xff, 0x7f, 0x00, 0xfc, 0x00, 0xc6, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x9f, 0xff, 0xff, 
	0xff, 0x7f, 0x00, 0xf8, 0x01, 0xc6, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x9f, 0xff, 0xff, 
	0xff, 0x7f, 0x08, 0xf0, 0x03, 0xc6, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0xff, 
	0xff, 0x7f, 0x10, 0xe0, 0x07, 0xc6, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0xff, 
	0xff, 0x7f, 0x20, 0xc0, 0x0f, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0xff, 
	0xff, 0x7f, 0x00, 0x00, 0x00, 0x06, 0x80, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x9f, 0xff, 0xff, 
	0xff, 0x7f, 0x00, 0x00, 0x00, 0x06, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x9f, 0xff, 0xff, 
	0xff, 0x7f, 0xfc, 0xff, 0xff, 0x07, 0x7c, 0x00, 0x3e, 0x60, 0xf8, 0x1f, 0xc0, 0x9f, 0xff, 0xff, 
	0xff, 0x7f, 0xc4, 0x00, 0x0e, 0xc7, 0x3f, 0x00, 0x3c, 0x60, 0xf8, 0x0f, 0x80, 0x9f, 0xff, 0xff, 
	0xff, 0x7f, 0xc4, 0x00, 0x0e, 0xc7, 0x1f, 0x00, 0x38, 0x60, 0xf8, 0x07, 0x00, 0x9f, 0xff, 0xff, 
	0xff, 0x7f, 0xc4, 0x00, 0x0e, 0xc7, 0x0f, 0x00, 0xf0, 0xff, 0xff, 0x03, 0x00, 0x9e, 0xff, 0xff, 
	0xff, 0x7f, 0xfc, 0xff, 0xff, 0xc7, 0x0f, 0x7e, 0xf0, 0xff, 0xff, 0x83, 0x1f, 0x8e, 0xff, 0xff, 
	0xff, 0x7f, 0xfc, 0xff, 0xff, 0x07, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x80, 0x1f, 0x80, 0xff, 0xff, 
	0xff, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xc0, 0x3f, 0xc0, 0xff, 0xff, 
	0xff, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xc0, 0x3f, 0xe0, 0xff, 0xff, 
	0xff, 0xff, 0x3f, 0x00, 0xe0, 0xff, 0x0f, 0xff, 0x70, 0x00, 0xf8, 0xc3, 0x3f, 0xfc, 0xff, 0xff, 
	0xff, 0xff, 0x7f, 0x00, 0xf0, 0xff, 0x0f, 0x7e, 0xf0, 0x00, 0xfc, 0x87, 0x1f, 0xfe, 0xff, 0xff, 
	0xff, 0xff, 0x7f, 0x00, 0xf0, 0xff, 0x1f, 0x7e, 0xf8, 0x00, 0xfc, 0x87, 0x1f, 0xfe, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0x01, 0xfc, 0xff, 0x3f, 0x00, 0xfc, 0x01, 0xfe, 0x0f, 0x00, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x00, 0xfe, 0xff, 0xff, 0x1f, 0x80, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0x7f, 0xc0, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};

void setup() {
  lcd.begin(16, 2);
  Serial.begin(115200);
  
  Wire.begin(SDA_PIN_3, SCL_PIN_3);
  u8g3.begin();
  

  WiFi.begin(ssid, password, 6);

  lcd.print("Wifi Connecting");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  lcd.clear();
  Serial.println("Connected to WiFi");
  lcd.print("Enter Stop ID:");

  u8g2.begin();
  u8g2.clearBuffer();
  u8g2.drawXBMP(0, 0, 128, 64, newbus_bitmap);
  u8g2.sendBuffer();

  u8g3.begin();
  u8g3.setDisplayRotation(U8G2_R2);
  u8g3.clearBuffer();
  u8g3.setFont(u8g2_font_6x10_tf);
  u8g3.drawStr(10, 10, "WIFI: Connected");
  String ip = "IP: " + WiFi.localIP().toString();
  u8g3.drawStr(10, 20, ip.c_str());
  u8g3.drawStr(10, 30, "TRANSIT REGION:");
  u8g3.drawStr(10, 40, "[1] Puget Sound, WA");
  u8g3.sendBuffer();
  
}

unsigned long lastKeyPressTime = 0;
unsigned long retrieveInterval = 1000;
bool isRetrievingData = false;
String busID;

void loop() {
  timeClient.update();
  String formattedTime = timeClient.getFormattedTime();
  u8g3.setDrawColor(0);
  u8g3.drawBox(0, 60, 128, 10);
  u8g3.setDrawColor(1);
  u8g3.drawStr(10, 60, formattedTime.c_str()); 
  u8g3.sendBuffer();

  char key = keypad.getKey();
  if (key) {
    input += key;
    lcd.clear();
    lcd.print("ID: ");
    lcd.print(input);

    if (key == '#') {
      busID = input.substring(0, input.length() - 1); 
      lcd.clear();
      lcd.print("Retrieving data...");
      isRetrievingData = true; 
      lastKeyPressTime = millis();
      input = ""; 
    }
  }

  if (isRetrievingData) {
    if (millis() - lastKeyPressTime >= retrieveInterval) {
      getStopData(busID);
      lcd.clear();
      lcd.print("Enter Stop ID: ");
      isRetrievingData = false;
    }
  }
}

void getStopData(String busID) {
  HTTPClient http;
  http.useHTTP10(true);
  http.begin(url);

  http.addHeader("Content-Type", "application/json");

  String postData = "{\"id\":\"" + busID + "\"}";

  int httpResponseCode = http.POST(postData);

  if (httpResponseCode > 0) {
    Serial.print("Response code: ");
    Serial.println(httpResponseCode);

    String response = http.getString(); 
    Serial.println("Response: ");
    Serial.println(response);

    DynamicJsonDocument doc(2048);
    DeserializationError error = deserializeJson(doc, response);
    
    if (error) {
      Serial.print("Error parsing JSON: ");
      Serial.println(error.f_str());
      return;

    } else {
      String busData = doc["body"];
      const char* body = doc["body"];
      StaticJsonDocument<256> bodyDoc;
      error = deserializeJson(bodyDoc, body);

      if (error) {
          lcd.clear();
          lcd.print("Body Parse Fail");
          return;
      }
    
      int dataSize = bodyDoc.size();
      String* busdata = new String[dataSize];
      for(int i = 0; i< dataSize; i++) {
        busdata[i] = bodyDoc[i].as<String>();
      }
      outputStopData(busdata, dataSize);
    }

  } else {
    Serial.print("Error in HTTP request: ");
    Serial.println(httpResponseCode);
    return;
  }
  http.end();
}

void outputStopData(String* busdata, int dataSize) {
  for(int i = 0; i < dataSize; i += 2) {
    lcd.clear();
    lcd.setCursor(0,0);
    lcd.print(busdata[i]);

    if(i + 1 < dataSize) {
      lcd.setCursor(0,1);
      lcd.print(busdata[i+1]);
    }

    delay(5000);
  }
}


